AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'Open Ports: 443, 8080, 8081' 
Parameters:
  InstanceName:
    Description: Enter Instance Name
    Type: String
    Default: Wrangler-EC2CodeDeployInstance-2

  # To be removed
  # KeyName:
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  #   Type: AWS::EC2::KeyPair::KeyName
  #   ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SubnetId: 
    Description: Select Subnet ID
    Type: AWS::EC2::Subnet::Id
  VpcId:
    Description: Select a VPC
    Type: AWS::EC2::VPC::Id

  CidrIp:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    # Default: 10.0.0.0/8
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds: [!GetAtt WranglerInstanceSecurityGroup.GroupId]
      # KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref rEc2InstanceProfile
      UserData: 
        Fn::Base64: |
          #!/bin/bash -xe
          yum -y update
          yum install -y ruby
          cd /home/ec2-user
          curl -O https://aws-codedeploy-us-east-2.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          ## Code Deploy Agent Bootstrap Script##
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          AUTOUPDATE=false
          function installdep(){
          if [ ${PLAT} = "ubuntu" ]; then
            apt-get -y update
            # Satisfying even ubuntu older versions.
            apt-get -y install jq awscli ruby2.0 || apt-get -y install jq awscli ruby
          elif [ ${PLAT} = "amz" ]; then
            yum -y update
            yum install -y aws-cli ruby jq
          fi
          }
          function platformize(){
          #Linux OS detection#
          if hash lsb_release; then
            echo "Ubuntu server OS detected"
            export PLAT="ubuntu"
          elif hash yum; then
            echo "Amazon Linux detected"
            export PLAT="amz"
          else
            echo "Unsupported release"
            exit 1
          fi
          }
          function execute(){
          if [ ${PLAT} = "ubuntu" ]; then
            cd /tmp/
            wget https://aws-codedeploy-${REGION}.s3.amazonaws.com/latest/install
            chmod +x ./install
            if ./install auto; then
              echo "Instalation completed"
                if ! ${AUTOUPDATE}; then
                      echo "Disabling Auto Update"
                      sed -i '/@reboot/d' /etc/cron.d/codedeploy-agent-update
                      chattr +i /etc/cron.d/codedeploy-agent-update
                      rm -f /tmp/install
                fi
              exit 0
            else
              echo "Instalation script failed, please investigate"
              rm -f /tmp/install
              exit 1
            fi
          elif [ ${PLAT} = "amz" ]; then
            cd /tmp/
            wget https://aws-codedeploy-${REGION}.s3.amazonaws.com/latest/install
            chmod +x ./install
              if ./install auto; then
                echo "Instalation completed"
                  if ! ${AUTOUPDATE}; then
                      echo "Disabling auto update"
                      sed -i '/@reboot/d' /etc/cron.d/codedeploy-agent-update
                      chattr +i /etc/cron.d/codedeploy-agent-update
                      rm -f /tmp/install
                  fi
                exit 0
              else
                echo "Instalation script failed, please investigate"
                rm -f /tmp/install
                exit 1
              fi
          else
            echo "Unsupported platform ''${PLAT}''"
          fi
          }
          platformize
          installdep
          REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r ".region")
          execute
      Tags:
        - Key: Name
          Value: !Ref InstanceName
  WranglerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH, Tomcat access via port 22 and 8080-8081
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref CidrIp
        # CidrIp: 10.0.0.0/8
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8081
        CidrIp: !Ref CidrIp
        # CidrIp: 10.0.0.0/8


  rEc2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
        - !Ref rEc2InstanceRole
  rEc2InstanceRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        # The managed IAM policy AmazonSSMManagedInstanceCore grants access to Session Manager
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Ref EC2CodeDeployPolicy
  
  EC2CodeDeployPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for EC2 Code Deploy
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/ChefAllowNodeAssociation
          Effect: Allow
        - Condition:
            StringLike:
              aws:RequestTag/createdate: "*"
          Action:
          - ec2:CreateTags
          - ec2:DescribeTags
          Resource: "*"
          Effect: Allow
        - Action:
          - ec2:ModifyVolume
          - ec2:CreateSnapshot
          - ec2:DescribeInstances
          - ec2:DescribeSnapshots
          - ec2:DescribeVolumesModifications
          - ec2:CreateTags
          Resource: "*"
          Effect: Allow
        - Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          - logs:DescribeLogGroups
          Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:expandDisk-*
          Effect: Allow
        - Action: ssm:GetParameter
          Resource:
          - !Sub arn:aws:ssm:*:${AWS::AccountId}:parameter/org/member/opsworks/chefserver
          - !Sub arn:aws:ssm:*:${AWS::AccountId}:parameter/org/member/opsworks/account_id
          - !Sub arn:aws:ssm:*:${AWS::AccountId}:parameter/org/member/opsworks/chefendpoint
          - !Sub arn:aws:ssm:*:${AWS::AccountId}:parameter/org/member/truesight/truesight-smarthuburl
          - !Sub arn:aws:ssm:*:${AWS::AccountId}:parameter/org/member/truesight/truesight-smarthubaccesskey
          Effect: Allow
        - Action:
          - ssm:DescribeAssociation
          - ssm:GetDeployablePatchSnapshotForInstance
          - ssm:GetDocument
          - ssm:DescribeDocument
          - ssm:GetManifest
          - ssm:GetParameter
          - ssm:GetParameters
          - ssm:ListAssociations
          - ssm:ListInstanceAssociations
          - ssm:PutInventory
          - ssm:PutComplianceItems
          - ssm:PutConfigurePackageResult
          - ssm:UpdateAssociationStatus
          - ssm:UpdateInstanceAssociationStatus
          - ssm:UpdateInstanceInformation
          Resource: "*"
          Effect: Allow
        - Action:
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
          Resource: "*"
          Effect: Allow
        - Action:
          - ec2messages:AcknowledgeMessage
          - ec2messages:DeleteMessage
          - ec2messages:FailMessage
          - ec2messages:GetEndpoint
          - ec2messages:GetMessages
          - ec2messages:SendReply
          Resource: "*"
          Effect: Allow
        - Action:
          - s3:Get*
          - s3:List*
          Resource: "*"
          Effect: Allow
        - Action:
          - kms:Decrypt
          - kms:DescribeKey
          Resource: "*"
          Effect: Allow

  # EC2CodeDeployPolicy:
  # Type: 'AWS::IAM::ManagedPolicy'
  # Properties:
  #   Description: Policy for EC2 Code Deploy
  #   Path: /
  #   PolicyDocument:
  #     Version: '2012-10-17'
  #     Statement:
  #     - Effect: Allow
  #       Action:
  #       - cloudwatch:PutMetricData
  #       - ec2:DescribeVolumes
  #       - ec2:DescribeTags
  #       - logs:PutLogEvents
  #       - logs:DescribeLogStreams
  #       - logs:DescribeLogGroups
  #       - logs:CreateLogStream
  #       - logs:CreateLogGroup
  #       Resource: "*"
  #     - Effect: Allow
  #       Action:
  #       - ssm:GetParameter
  #       Resource: arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  # PublicIP:
  #   Description: Public IP address of the newly created EC2 instance
  #   Value: !GetAtt [EC2Instance, PublicIp]